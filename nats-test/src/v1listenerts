import nats, { Message, Stan } from 'node-nats-streaming';
import { randomBytes } from 'crypto';//generate random bytes

console.clear();

//creating the client
                                        //V1 WAS '123'
const stan = nats.connect('ticketing', randomBytes(4).toString('hex'), {
    url: 'http://localhost:4222',
});

//listen for connect event

stan.on('connect', () => {
    console.log('Listener connected to NATS');

    //the fix for that 30 s time perisistence
    stan.on('close', () => {
        console.log('NATS connection closed!');
        process.exit();
    });
    
    //config options
    const options = stan
        .subscriptionOptions()
        .setManualAckMode(true)//the default behavior as soon as we receiveed the event we marked as processes event though a db fail to store happens and we're never going to here about the failure and w eloose the event to reprocess
        //with this flag the nats is not going to automatically acknowledge or tell nats library that we have received the event instead it will be up to user to process that event , save some info to db , and then after the entire process is complete we will ackowledge the message and say process success
        //after 30 sec pause if  no acnowledge is received it will resend the event, then beceuse that copy service does not have ack it will send this again and again 
        .setDeliverAllAvailable()//customize wich events gets replayed or resent that have been emitted in the past posibbly while this service was offline
        //no feaseble due to ammount of events than might need to be replayed

    //this process of memorizing , then batch them all when in comes back online then remark them as proces happens only once  if we have also the below option enabled
        //because the option below is enabled al from the pasted will be marked as process , so it won't be resend the second time it comes online
        .setDurableName('accounting-service');//durable subscription
    //nats internally inside of the channel we are subscribing is going to create a record listing of all durable subscriptions that we have, NATS is going to store a little record next to this durable subscription and say this durable subscription with ID xx has processed event nr 1 successfully
    // if that durable sub is going down nats is going to keep a record of all the events the sub with ID xx whould have received/missed on , when is up online it will process one by one come back to NATS durable subscription record and mark them as processed
    //if a durable sub disappears like we set it with process kill it will dump all records of need to process events , then all events it will be resend (this mecanism happens because we disabled the que-group), if we add the que group it won't dump entire durable suscription when subs go offline for a brief time

        // .setMaxInFlight();
    //the listen function under desguise
        //que group creation, auto regulation by nats stream
    const subscription = stan.subscribe(
        'ticket:created',
        'queue-group-name',// if we want to see this dump of  replay events in action , disable this and add the option sub setDeliverAllAvailable

        options//customizing the que
    );

    subscription.on('message', (msg: Message) => {
        const data = msg.getData();
        if (typeof data === 'string') {
            console.log(`Received event #${msg.getSequence()}, with data: ${data}`);
        }
        //before was no ack , v2 is with ack true , this stops the recursivity if the events is received
       msg.ack();
    });
});


//fix for 30 sec offline persistance ,interrupt messages , not 100% on windows
//on out or restart, interrr sig or terminate sig for this process when doing ctrl+c or rs 
process.on('SIGINT', () => stan.close());
process.on('SIGTERM', () => stan.close());

//rs restart nats to pub listen

// Localhost: 8222 / streaming

// Localhost:8222/streaming/channelsz?subs=1

// when restart a listener / sub i stopped that listener , I restarted one so the copy of that listener that client that I was running with the subscription it was closed one and i created a new one, but for a brief period of time nats streaming server is just going to assume that maybe there is some momentary interrupt in com or conn with that client so it will still persist it for a brief period of time thinking it will come back online, and it will wait wit h the sub registred and when the wait time expires it will remove from the subscriptions

// configurable with the               '-hbi',
    // '5s',
    // '-hbt',
    // '5s',
    // '-hbf',
    // '2',

    //v2 configure for time perisistence of offline subs/pubs

abstract class Listener {
    abstract subject: string;

    abstract queueGroupName: string;

    private client: Stan;

    private ackWait = 5 * 1000;

    abstract onMessage(data:any/* T['data']*/, msg: Message): void;
    
    constructor(client: Stan) {
        this.client = client;

    }
    subscriptionOptions() {
        return this.client
            .subscriptionOptions()
            .setDeliverAllAvailable()
            .setManualAckMode(true)
            .setAckWait(this.ackWait)
            .setDurableName(this.queueGroupName);
    }

    listen() {
        const subscription = this.client.subscribe(
            this.subject,
            this.queueGroupName,
            this.subscriptionOptions()
        );

        subscription.on('message', (msg: Message) => {
            console.log(`Message received: ${this.subject} / ${this.queueGroupName}`);

            const parsedData = this.parseMessage(msg);
            this.onMessage(parsedData, msg);
        });
    }

    parseMessage(msg: Message) {
        const data = msg.getData();
        return typeof data === 'string'
            ? JSON.parse(data): JSON.parse(data.toString('utf8'));//parse buffer to get the data
    }
}

class TicketCreatedListener extends Listener{
    subject = 'ticket:created';
    queueGroupName = 'payments-service';
    onMessage(data: any, msg: Message) {
        console.log('Event  data !', data);
            // future loggic
        msg.ack();
    }
}


